{
    "opentelemetry-nodejs": {
        "name": "OpenTelemetry NodeJS Tutorial",
        "description": "Complete guide to implementing OpenTelemetry in Node.js microservices applications",
        "longDescription": "<p>This comprehensive tutorial series will transform your Node.js microservices from isolated components into a fully observable distributed system using OpenTelemetry and SigNoz. Starting with environment setup, you'll progress through automatic and manual instrumentation to production-ready observability.</p><p>Learn to implement end-to-end observability: distributed tracing across microservices, custom metrics for business logic, structured logging with trace correlation, and unified visualization in SigNoz. You'll work with a real microservices application including Order, Product, User, and Payment services, gaining hands-on experience with OpenTelemetry Collector, custom spans, and advanced monitoring techniques.</p><p>By the end, you'll have mastered observability for Node.js microservices, from automatic instrumentation to custom metrics and log correlation, all visualized in SigNoz for enhanced debugging and performance monitoring.</p>",
        "seriesOverviewHref": "/opentelemetry/series/nodejs",
        "heroImageUrl": "/img/blog/2024/12/opentelemetry-nodejs-cover.webp",
        "keywords": [
            "OpenTelemetry",
            "NodeJS",
            "Microservices",
            "Distributed Tracing",
            "Observability",
            "Metrics",
            "Logs",
            "SigNoz",
            "JavaScript",
            "Performance Monitoring"
        ],
        "articles": [
            {
                "title": "Overview - Implementing OpenTelemetry in NodeJS with SigNoz",
                "description": "Introduction to the comprehensive NodeJS OpenTelemetry tutorial series covering microservices observability, prerequisites, and expected outcomes.",
                "href": "/opentelemetry/nodejs-tutorial-overview",
                "learningOutcomes": [
                    "Understand the scope and structure of the NodeJS OpenTelemetry tutorial series",
                    "Learn about microservices observability challenges and solutions",
                    "Identify prerequisites for implementing OpenTelemetry in NodeJS",
                    "Set expectations for mastering distributed tracing, metrics, and logging",
                    "Overview of the sample microservices application architecture"
                ]
            },
            {
                "title": "Setting Up Docker and Your Local Environment - OpenTelemetry NodeJS",
                "description": "Learn how to set up Docker, NodeJS, MongoDB Compass, and Postman for your NodeJS microservices application development environment.",
                "href": "/opentelemetry/nodejs-docker-setup",
                "learningOutcomes": [
                    "Install and configure Docker and Docker Compose for containerization",
                    "Set up NodeJS development environment with proper version management",
                    "Install and configure MongoDB Compass for database management",
                    "Set up Postman for API testing and validation",
                    "Verify all tools are working correctly for the tutorial series"
                ]
            },
            {
                "title": "Understanding and Cloning the Sample Application - OpenTelemetry NodeJS",
                "description": "Guide to cloning and setting up the sample microservices application for implementing OpenTelemetry, including Docker setup and mock data.",
                "href": "/opentelemetry/nodejs-clone-application",
                "learningOutcomes": [
                    "Clone and understand the sample microservices application structure",
                    "Set up Order, Product, User, and Payment services with Docker",
                    "Configure MongoDB database with mock data for testing",
                    "Test service communication and API endpoints",
                    "Understand the baseline application before adding observability"
                ]
            },
            {
                "title": "Autoinstrumentation for Traces - OpenTelemetry NodeJS",
                "description": "Simplify telemetry integration with OpenTelemetry to automatically capture detailed traces in NodeJS microservices without code modifications.",
                "href": "/opentelemetry/autoinstrumented-tracing-nodejs",
                "learningOutcomes": [
                    "Install and configure OpenTelemetry auto-instrumentation libraries",
                    "Set up automatic trace collection across multiple microservices",
                    "Configure SigNoz as the observability backend for trace data",
                    "Understand trace propagation between distributed services",
                    "Analyze automatically generated traces in SigNoz dashboard"
                ]
            },
            {
                "title": "Exploring Metrics Created via Traces in SigNoz - OpenTelemetry NodeJS",
                "description": "Learn to generate and visualize key performance metrics from OpenTelemetry traces using SigNoz for effective application monitoring.",
                "href": "/opentelemetry/metrics-nodejs",
                "learningOutcomes": [
                    "Understand how metrics are derived from OpenTelemetry traces",
                    "Explore RED metrics (Rate, Errors, Duration) in SigNoz",
                    "Analyze latency distributions and request patterns",
                    "Set up alerts and thresholds for key performance indicators",
                    "Create custom dashboards for monitoring microservices health"
                ]
            },
            {
                "title": "Setting up the Otel Collector - OpenTelemetry NodeJS",
                "description": "Step-by-step guide to setting up the OpenTelemetry Collector for managing and exporting telemetry data in a centralized architecture.",
                "href": "/opentelemetry/collector-nodejs",
                "learningOutcomes": [
                    "Understand when to use OpenTelemetry Collector vs direct export",
                    "Configure Collector for centralized telemetry data management",
                    "Set up data processing, filtering, and enrichment pipelines",
                    "Configure multiple exporters for different observability backends",
                    "Troubleshoot common Collector configuration and connectivity issues"
                ]
            },
            {
                "title": "Manual Instrumentation for Traces - OpenTelemetry NodeJS",
                "description": "Enhance observability by adding custom spans in your NodeJS Order service using OpenTelemetry for tracking specific business logic.",
                "href": "/opentelemetry/add-manual-span-to-traces-nodejs",
                "learningOutcomes": [
                    "Implement manual span creation for custom business logic",
                    "Add attributes and events to spans for enhanced context",
                    "Track specific operations like order validation processes",
                    "Handle span lifecycle management and error recording",
                    "Visualize custom spans alongside auto-instrumented traces"
                ]
            },
            {
                "title": "Setting up Custom Metrics - OpenTelemetry NodeJS",
                "description": "Learn how to define, collect, and visualize custom metrics in your NodeJS microservices using OpenTelemetry and SigNoz.",
                "href": "/opentelemetry/custom-metrics-nodejs",
                "learningOutcomes": [
                    "Understand different types of OpenTelemetry metrics (Counter, Gauge, Histogram)",
                    "Implement custom metrics for business-specific measurements",
                    "Configure MeterProvider and metric exporters",
                    "Track performance metrics like order validation duration",
                    "Create custom metric dashboards in SigNoz"
                ]
            },
            {
                "title": "Sending Logs to SigNoz - OpenTelemetry NodeJS",
                "description": "Implement structured logging with Pino and send logs to SigNoz for better debugging and analysis in your NodeJS services.",
                "href": "/opentelemetry/logging-nodejs",
                "learningOutcomes": [
                    "Set up structured logging with Pino library",
                    "Configure OpenTelemetry logging SDK for NodeJS",
                    "Implement log correlation with trace and span IDs",
                    "Send logs to SigNoz through OpenTelemetry Collector",
                    "Analyze correlated logs and traces in SigNoz interface"
                ]
            },
            {
                "title": "Correlating Traces, Logs, and Metrics - OpenTelemetry NodeJS",
                "description": "Discover how to integrate and visualize correlated traces, logs, and metrics for enhanced observability in SigNoz.",
                "href": "/opentelemetry/correlating-traces-logs-metrics-nodejs",
                "learningOutcomes": [
                    "Understand the benefits of correlating observability signals",
                    "Configure trace ID and span ID injection in logs",
                    "Navigate between traces, logs, and metrics in SigNoz",
                    "Debug complex issues using correlated observability data",
                    "Implement best practices for unified observability"
                ]
            }
        ]
    },
    "opentelemetry-nextjs": {
        "name": "OpenTelemetry NextJS Tutorial",
        "description": "Complete guide to implementing OpenTelemetry in Next.js applications",
        "longDescription": "<p>This comprehensive series transforms your Next.js application from a black box into a fully observable system using OpenTelemetry and SigNoz. Starting with basic instrumentation, you'll progress through real-world monitoring scenarios to production-ready observability.</p><p>Learn to track everything that matters: server-side traces and API performance, client-side Web Vitals and widget impact, structured logging with trace correlation, exception monitoring, and external API dependencies. You'll also master production concerns like sampling strategies, data sanitization, alerting, and scaling—whether deploying on Vercel or self-hosted infrastructure.</p><p>By the end, you'll have unified observability across your entire Next.js stack, from browser performance to backend bottlenecks, all visualized in SigNoz dashboards with actionable alerts.</p>",
        "seriesOverviewHref": "/opentelemetry/series/nextjs",
        "heroImageUrl": "/img/blog/2024/12/opentelemetry-nextjs-cover.webp",
        "keywords": [
            "OpenTelemetry",
            "NextJS",
            "Observability",
            "Tracing",
            "Metrics",
            "Logs",
            "SigNoz",
            "JavaScript",
            "Performance Monitoring"
        ],
        "articles": [
            {
                "title": "Monitor NextJS with OpenTelemetry - Traces, Metrics, and Logs",
                "description": "Learn how to instrument your Next.js application using OpenTelemetry to collect traces, metrics, and logs and send them to SigNoz for complete observability.",
                "href": "/blog/opentelemetry-nextjs",
                "learningOutcomes": [
                    "Set up OpenTelemetry instrumentation in Next.js with @vercel/otel",
                    "Configure automatic tracing for API routes, SSR, and fetch requests",
                    "Deploy and run an OpenTelemetry Collector locally with Docker",
                    "Export traces to both Jaeger and SigNoz for visualization",
                    "Understand default Next.js spans and trace analysis",
                    "Debug instrumentation issues and optimize trace collection"
                ]
            },
            {
                "title": "NextJS OpenTelemetry Use Cases - Monitoring 404s, External APIs, Exceptions & More",
                "description": "Explore powerful real-world observability patterns in your Next.js application using OpenTelemetry and SigNoz—from tracking 404s to monitoring third-party APIs.",
                "href": "/blog/opentelemetry-nextjs-use-cases",
                "learningOutcomes": [
                    "Build custom queries in SigNoz to track 404 errors and route issues",
                    "Monitor third-party API performance and external dependencies",
                    "Implement exception monitoring with proper span error recording",
                    "Create dashboards for business metrics and user journey tracking",
                    "Set up database query monitoring and slow query detection",
                    "Track cache hit/miss ratios and background job performance"
                ]
            },
            {
                "title": "Tracking Web Vitals & Widget Performance in Next.js with OpenTelemetry",
                "description": "Learn how to instrument your Next.js frontend to track Web Vitals and third-party widget performance using OpenTelemetry and send the data to SigNoz.",
                "href": "/blog/opentelemetry-nextjs-web-vitals",
                "learningOutcomes": [
                    "Instrument browser-side OpenTelemetry for frontend monitoring",
                    "Capture Core Web Vitals (LCP, INP, CLS) with real user data",
                    "Track third-party widget loading performance and impact",
                    "Export browser metrics to SigNoz via OTLP HTTP",
                    "Create Web Vitals dashboards for performance monitoring",
                    "Correlate frontend performance with backend traces"
                ]
            },
            {
                "title": "Structured Logging in NextJS with OpenTelemetry",
                "description": "Implement structured logging in your Next.js app using OpenTelemetry with full trace correlation and SigNoz integration for both server and browser logging.",
                "href": "/blog/opentelemetry-nextjs-logging",
                "learningOutcomes": [
                    "Set up structured logging with OpenTelemetry logs SDK",
                    "Implement server-side logging with automatic trace correlation",
                    "Build browser logger that exports to server via API routes",
                    "Correlate logs with traces using traceId and spanId",
                    "Create unified logging across client and server environments",
                    "Visualize correlated logs and traces in SigNoz dashboards"
                ]
            },
            {
                "title": "Deploying and Scaling OpenTelemetry in Production NextJS Apps",
                "description": "Learn how to deploy OpenTelemetry-instrumented Next.js apps to production with Vercel or self-hosted infra, covering collector vs direct exporter setups and best practices.",
                "href": "/blog/opentelemetry-nextjs-production",
                "learningOutcomes": [
                    "Deploy instrumented Next.js apps to Vercel and self-hosted infrastructure",
                    "Choose between OpenTelemetry Collector vs direct exporter architectures",
                    "Implement production-grade alerting for latency, errors, and external APIs",
                    "Configure sampling strategies to optimize performance and costs",
                    "Sanitize sensitive data and implement security best practices",
                    "Handle cold starts, performance overhead, and scaling considerations"
                ]
            }
        ]
    }
}